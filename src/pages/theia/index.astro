---
import Layout from "../../layouts/index.astro"
---

<Layout title="Theia">
	<main>
		<article>
			<h1>Home</h1>
			<code></code>
		</article>
	</main>
	<script>
		globalThis.addEventListener("DOMContentLoaded", async () => {
			const codeBlock = document.querySelector("code")
			const params = new URLSearchParams(window.location.search)

			if (params.has("code")) {
				sessionStorage.setItem("code", params.get("code"))
				params.delete("code")
				history.replaceState({}, "", window.location.pathname)
			}

			const generateSHA256Hash = async data => {
				const encoder = new TextEncoder()
				const dataBuffer = encoder.encode(data)

				const hashBuffer = await window.crypto.subtle.digest(
					"SHA-256",
					dataBuffer,
				)

				const hashArray = Array.from(new Uint8Array(hashBuffer))
				const hashHex = hashArray
					.map(byte => byte.toString(16).padStart(2, "0"))
					.join("")

				return hashHex
			}

			const createRandomString = length => {
				const chars =
					"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"

				return Array.from({ length })
					.map(() => chars.charAt(Math.floor(Math.random() * chars.length)))
					.join("")
			}

			const code_verifier = (sessionStorage.getItem("verifier") ||
				sessionStorage.setItem("verifier", createRandomString(128)) ||
				sessionStorage.getItem("verifier")) as string

			const hashValue = await generateSHA256Hash(code_verifier)

			const code_challenge = (sessionStorage.getItem("hash") ||
				sessionStorage.setItem("hash", hashValue) ||
				sessionStorage.getItem("hash")) as string

			const client_id = (sessionStorage.getItem("client_id") ||
				sessionStorage.setItem("client_id", "gpdqmuss89btgdn2mte1ncvj4") ||
				sessionStorage.getItem("client_id")) as string

			const code = sessionStorage.getItem("code")
			const token = sessionStorage.getItem("token")

			console.log("CODE", code)

			console.log("client_id", client_id)
			console.log("code_challenge", code_challenge)
			console.log("code_verifier", code_verifier)
			console.log("code", code)
			console.log("token", token)

			if (codeBlock) {
				codeBlock.innerHTML = `client_id: ${client_id}<br>
				code_challenge: ${code_challenge}<br>
				code_verifier: ${code_verifier}<br>
				code: ${code}<br>
				token: ${token}<br>`
			}

			const redirect_uri = "https://sitebender.io/theia"
			const response_type = "code"
			const code_challenge_method = "S256"

			if (!code) {
				console.log("Better get a code!")
				const href =
					"https://ariadne.auth.us-west-2.amazoncognito.com/oauth2/authorize"

				const searchParams = new URLSearchParams({
					response_type,
					client_id,
					redirect_uri,
					code_challenge,
					code_challenge_method,
				})

				const url = new URL(`${href}?${searchParams.toString()}`)

				window.location.href = url.href

				console.log("url", url)
			}

			if (code) {
				const button = document.createElement("BUTTON")
				button.innerHTML = "Get token"
				button.addEventListener("click", getToken)
			}

			const getToken = () => {
				const postUrl =
					"https://ariadne.auth.us-west-2.amazoncognito.com/oauth2/token"
				const grant_type = "authorization_code"

				const resp = await fetch(postUrl, {
					body: new URLSearchParams({
						grant_type,
						redirect_uri,
						client_id,
						code,
						code_verifier,
					}),
					headers: {
						"Content-Type": "application/x-www-form-urlencoded",
						"Accept": "application/json",
					},
					method: "POST",
					mode: "no-cors",
				})

				console.log("resp", resp)
				if (resp) {
					console.log("json", await resp.json())
				}
			}
		})
	</script>
</Layout>
