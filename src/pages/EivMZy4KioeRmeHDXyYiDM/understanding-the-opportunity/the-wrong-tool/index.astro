---
import Layout from "../../../../layouts/ez/index.astro"
---

<Layout title="The wrong tool">
	<article>
		<header>
			<h1>The wrong tool</h1>
			<p class="label draft"></p>
		</header>
		<p>
			It is probably a bit unfair to call this &ldquo;the wrong tool&rdquo;.
			More apt might be &ldquo;the less-than-ideal tool&rdquo;. Doesn&rsquo;t
			really have the same ring to it, though, does it?
		</p>
		<p>
			When the current VPIS app was built, the decision was made (for all the
			right reasons) to outsource it. Smart.
		</p>
		<p>
			When the company that took the contract learned what was to be built, they
			had a tool on hand, namely .Net, that seemed sufficient to the task.
		</p>
		<p>
			Was this the <strong>right</strong> tool? Was it the <strong>best</strong>
			tool? No, it wasn&rsquo;t. But it was the tool they had and it was enough.
			And everyone uses it, right?
		</p>
		<p>
			But since the .Net framework was the state of the art—roughly fifteen to
			twenty years ago—things have progressed. We have found simpler but no less
			effective ways to build web applications.
		</p>
		<p>
			.Net and C# were created to compete with <strong>Java</strong> and <strong
				>J2EE</strong
			>. All these remain popular with very large enterprises for very big
			applications, although Go, Rust, Kotlin, and others are making inroads.
		</p>
		<p>
			But for an SME such as EZIDOCS, .Net/C# is like cutting butter with a
			chain saw. You can do it, but it gets messy.
		</p>
		<p>
			What came out of this process works well for the customer. But for
			EZIDOCS? Not so much. The price of speed was a mountain of tech debt.
		</p>
		<p>
			It is a monolithic app in an era of lightweight, decoupled modular apps.
			It does everything in C#—even creating the HTML. The result is bulky,
			spaghetti code.
		</p>
	</article>
</Layout>
